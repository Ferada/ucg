# performance_tests.at for UniversalCodeGrep
#
# Copyright 2015-2016 Gary R. Van Sickle (grvs@users.sourceforge.net).
#
# This file is part of UniversalCodeGrep.
#
# UniversalCodeGrep is free software: you can redistribute it and/or modify it under the
# terms of version 3 of the GNU General Public License as published by the Free
# Software Foundation.
#
# UniversalCodeGrep is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.  See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with
# UniversalCodeGrep.  If not, see <http://www.gnu.org/licenses/>.


m4_define([EXTRACT_AND_APPEND_TIME],[
		# $1 == program name.
		AS_ECHO_N(["| $1 | "]) >> $PERF_RESULTS_FILE;
		cat stderr | egrep "real[[[:space:]]]*" | sed -r 's/real[[[:space:]]]*(.*)/\1/' | tr -d '\n' >> $PERF_RESULTS_FILE;
		AS_ECHO_N(" | ") >> $PERF_RESULTS_FILE;
		cat stdout | wc -l | tr -d '\n' >> $PERF_RESULTS_FILE;
		AS_ECHO([" |"]) >> $PERF_RESULTS_FILE;
])

m4_define([PREP_ONE_PROG],[
# $1 == program name.
# $2 == search pattern.
AT_CHECK([time $1 $2 ${BOOST_PATH}],
	0,
	ignore,
	ignore)
])

m4_define([TIME_ONE_PROG],[
# $1 == program name.
# $2 == search pattern.
# $3 == params
NOENV=$(if $(echo $1 | egrep -q 'ucg|ack'); then echo --noenv; else echo ""; fi)
PREP_ONE_PROG([$1 ${NOENV}], [$2], [$3])
AT_CHECK([time $1 ${NOENV} $2 ${BOOST_PATH} $3],
	0,
	stdout,
	stderr,
	[],
	[
		EXTRACT_AND_APPEND_TIME([$1 ${NOENV}])
	])
])

###
### Start of the performance tests.
###
AT_BANNER([UniversalCodeGrep performance tests])

#
# Create the logfile.
#
AT_SETUP([Create report log file])
echo "ucg Performance Test Results" > $PERF_RESULTS_FILE
AT_CLEANUP

#
# Get the versions of the programs we're comparing to.
#
AT_SETUP([Getting program versions])

# Loop through the programs we're comparing performance with.
for PROGNAME in $PERF_PROGRAMS_TO_COMPARE grep; do
	AS_ECHO([--]) >> $PERF_RESULTS_FILE
	AS_ECHO(["$PROGNAME --version:"]) >> $PERF_RESULTS_FILE
	AS_ECHO(["$($PROGNAME --version)"]) >> $PERF_RESULTS_FILE
	AS_ECHO([--]) >> $PERF_RESULTS_FILE
done;

AT_CLEANUP


#
# Compare to grep.
#
AT_SETUP([Boost: compare performance to grep, 'BOOST.*HPP'])

# Skip this test if we can't find the Boost source tree.
AT_SKIP_IF([test ! -d "${BOOST_PATH}"])

AS_ECHO([""]) >> $PERF_RESULTS_FILE
AS_ECHO(["Perf Test Results: $at_desc"]) >> $PERF_RESULTS_FILE
AS_ECHO(["| Command | Time | Matching Lines |"]) >> $PERF_RESULTS_FILE;
AS_ECHO(["|---------|------|----------------|"]) >> $PERF_RESULTS_FILE;
TIME_ONE_PROG([ucg --cpp], ['BOOST.*HPP'])
TIME_ONE_PROG([grep -Ern --include=\*.cpp --include=\*.hpp --include=\*.h --include=\*.cc --include=\*.cxx], ['BOOST.*HPP'])

AT_CLEANUP


#
# Search on literal string.
#
AT_SETUP([Boost: find all '#endif's])

# Skip this test if we can't find the Boost source tree.
AT_SKIP_IF([test ! -d "${BOOST_PATH}"])

AS_ECHO([""]) >> $PERF_RESULTS_FILE
AS_ECHO(["Perf Test Results: $at_desc"]) >> $PERF_RESULTS_FILE

# Loop through the programs we're comparing performance with.
for PROGNAME in $PERF_PROGRAMS_TO_COMPARE; do
	TIME_ONE_PROG(["${PROGNAME}"], ['#endif'])
done

AT_CLEANUP


#
# Search with regex 'BOOST.*HPP'
#
AT_SETUP([Boost: search with regex 'BOOST.*HPP'])

# Skip this test if we can't find the Boost source tree.
AT_SKIP_IF([test ! -d "${BOOST_PATH}"])

AS_ECHO([""]) >> $PERF_RESULTS_FILE
AS_ECHO(["Perf Test Results: $at_desc"]) >> $PERF_RESULTS_FILE

# Loop through the programs we're comparing performance with.
for PROGNAME in $PERF_PROGRAMS_TO_COMPARE; do
	TIME_ONE_PROG(["${PROGNAME}"], ['BOOST.*HPP'])
done

AT_CLEANUP


#
# Search with ignore of part of the dir tree.
#
AT_SETUP([Boost: search with --ignore-dir=doc])

# Skip this test if we can't find the Boost source tree.
AT_SKIP_IF([test ! -d "${BOOST_PATH}"])

AS_ECHO([""]) >> $PERF_RESULTS_FILE
AS_ECHO(["Perf Test Results: $at_desc"]) >> $PERF_RESULTS_FILE

# Loop through the programs we're comparing performance with.
for PROGNAME in $PERF_PROGRAMS_TO_COMPARE; do
	TIME_ONE_PROG(["${PROGNAME}"], ['#endif'], [--ignore-dir=doc])
done

AT_CLEANUP


