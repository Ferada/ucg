# Top-level Makefile.am for UniversalCodeGrep
#
# Copyright 2015, 2016 Gary R. Van Sickle (grvs@users.sourceforge.net).
#
# This file is part of UniversalCodeGrep.
#
# UniversalCodeGrep is free software: you can redistribute it and/or modify it under the
# terms of version 3 of the GNU General Public License as published by the Free
# Software Foundation.
#
# UniversalCodeGrep is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.  See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with
# UniversalCodeGrep.  If not, see <http://www.gnu.org/licenses/>.

# Make sure autotools pick up the M4 macros in the ./m4 directory, and also copy
# any third-party macros (e.g. the system-wide ax_* Autoconf Macro Archive ones
# in /usr/share/aclocal) to ./m4 so they get distributed and automatically updated.
# Only useful in the top-level Makefile.am (see http://sources.redhat.com/automake/automake.html#Rebuilding).
ACLOCAL_AMFLAGS = -I m4 --install

# The subdirectories containing the source code, docs, and tests.
# Note: The code in src depends on the libraries in third_party, so make sure the latter is always listed before the former.
# Note that we can't list these other libraries in e.g. *_DEPENDENCIES because that replaces all Automake-generated dependencies.
# Note further the "." in the SUBDIRS below.  That means to make in this directory prior to "tests".  Without the ".",
# this directory would be built last, i.e. after "tests", which is not what we want. 
SUBDIRS = third_party src . tests

# Make sure README.rd and other docs get distributed and installed correctly.
dist_doc_DATA = README.md COPYING AUTHORS

# The Automake rules for the ucg executable and man file.
bin_PROGRAMS=ucg
ucg_SOURCES=main.cpp build_info.h
nodist_ucg_SOURCES=build_info.cpp
CLEANFILES=build_info.cpp
dist_man_MANS = ucg.1

if BUILD_BOOST_FROM_TARBALL
# Collect all the Boost libraries we need into a single variable.
BOOST_LOCAL_LIB = $(top_builddir)/third_party/$(BOOST_TARBALL_DIRNAME)/stage/lib
ALLBOOSTLIBS = $(BOOST_LOCAL_LIB)/libboost_thread.a \
	$(BOOST_LOCAL_LIB)/libboost_system.a
endif

# Collect some make-time info. 
FORCE:
build_info.cpp: FORCE verify-provenance
	echo "// Build information file." > "$@"
	echo "// THIS FILE IS AUTOMATICALLY GENERATED BY THE TOP-LEVEL MAKEFILE, DO NOT EDIT" >> "$@"
	echo "// VCS repo info (git describe / tarball)" >> "$@"
	if [ -f $(top_srcdir)/.tarball-version ]; then \
		: We are building from a tarball. ; \
		GIT_DESCRIBE=$$(cat $(top_srcdir)/.tarball-version); \
	elif (which git && cd $(top_srcdir) && git describe > /dev/null); then \
		: We are building from a git repo. ; \
		GIT_DESCRIBE="$$(cd $(top_srcdir) && git describe --dirty)"; \
	else GIT_DESCRIBE="unknown"; \
	fi; \
	echo "const char *g_git_describe = \"$${GIT_DESCRIBE}\";" >> "$@"
	echo "// CXX" >> "$@"
	echo "const char *g_cxx = \"$(CXX)\";" >> "$@"
# This is known to work for g++ and clang++.
	CXX_VERSION_STR=$$(if $$("$(CXX)" --version > /dev/null); then echo "$$($(CXX) --version | sed -r -n 's/^(.*[0-9]+\.[0-9]+\.[0-9]+.*)$$/\1/p')"; else echo "unknown"; fi;); \
	echo "const char *g_cxx_version_str = \"$${CXX_VERSION_STR}\";" >> "$@";

# Make sure we're either trying to build from a git repo or a tarball, and not in some weird state.
verify-provenance:
	if [ -d "$(top_srcdir)/.git" -a -f "$(top_srcdir)/.tarball-version" ]; \
	then \
		echo "ERROR: The top-level source directory, \"$(top_srcdir)\", appears to be in an"; \
		echo "inconsistent state: it looks like both an extracted tarball and a .git repo."; \
		echo "Removing the file \"$(top_srcdir)/.tarball-version\" will allow it to build."; \
		exit 1; \
	fi;
	
dist-hook:
	echo -n "$$(cd $(top_srcdir) && git describe --dirty | tr -d '\r\n')-tarball"  > "$(distdir)/.tarball-version"

# The make rule for building the man file with help2man.
# Note that we can't depend on the exe directly here, since it will break "make distcheck".
ucg.1: build_info.cpp $(top_srcdir)/configure.ac $(top_srcdir)/src/ArgParse.cpp
	$(MAKE) $(AM_MAKEFLAGS) ucg$(EXEEXT)
	$(HELP2MAN) --no-info --output=$@ ./ucg$(EXEEXT)


ucg_CPPFLAGS = -I $(top_srcdir)/src \
	$(BOOST_TR1_CPPFLAGS) $(BOOST_CPPFLAGS) \
	$(AM_CPPFLAGS) 
ucg_CFLAGS = $(AM_CFLAGS)
ucg_CXXFLAGS = $(AM_CXXFLAGS)
ucg_LDFLAGS = $(BOOST_LIBTOOL_FLAGS) $(BOOST_LDFLAGS) \
	$(AM_LDFLAGS)
ucg_LDADD = ./src/libsrc.a $(ALLBOOSTLIBS)


